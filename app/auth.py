from flask import render_template, flash, redirect, request, session, logging, url_for, Blueprint
from flask_sqlalchemy import SQLAlchemy
from . forms import LoginForm, RegisterForm
from werkzeug.security import generate_password_hash, check_password_hash

from .models import Users
from app import db

auth = Blueprint("auth", __name__, template_folder="templates", static_folder="static")

@auth.route("/")
def home():
    return render_template("/index.html")

@auth.route('/register', methods = ['GET', 'POST'])
def register():
    form = RegisterForm(request.form)
    if request.method == 'POST' and form.validate():
        hashed_password = generate_password_hash(form.password.data, method='sha256')
        new_user = Users(
            username = form.username.data,
            email = form.email.data,
            password = hashed_password )
        db.session.add(new_user)
        db.session.commit()
        flash('You have successfully registered', 'success')
        return redirect(url_for('login'))
    return render_template('/register.html', form = form)


@auth.route('/login', methods = ['GET', 'POST'])
def login():
    form = LoginForm(request.form)
    if request.method == 'POST' and form.validate:
        user = Users.query.filter_by(email = form.email.data).first()
        if user:
            if check_password_hash(user.password, form.password.data):
                flash('You have successfully logged in.', "success")
                session['logged_in'] = True
                session['email'] = user.email
                session['username'] = user.username
                return redirect(url_for('home'))
            else:
                flash('Username or Password Incorrect', "Danger")
                return redirect(url_for('login'))
    return render_template('/login.html', form = form)

@auth.route('/logout')
def logout():
    session['logged_in'] = False
    return redirect(url_for('auth.home'))
