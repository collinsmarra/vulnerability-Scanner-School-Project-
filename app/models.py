import datetime
from sqlalchemy import JSON
from app import db
import socket
import json
from . serialize import Serializer


class Roles(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=True)
    role = db.Column(db.String(255), nullable=False)
    def __repr(self):
        return self.role
    def to_dict(self):
        return{
            'role': self.role
        }

class Users(db.Model):
    __tablename__ = "users"
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255), nullable=False, unique=True)
    email = db.Column(db.String(255), nullable=False, unique=True)
    password = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(255), db.ForeignKey('roles.role'))
    roles = db.relationship('Roles')
    def __repr__(self):
        return self.username
    def to_dict(self):
        return {
            'name': self.username,
            'role': self.role
		}

class Subdomains(db.Model):
    """From simple recon data"""
    __tablename__ = "subs"
    id = db.Column(db.Integer, primary_key=True)
    subdomain = db.Column(db.String, unique=True)
    urls = db.Column(JSON, default=[])
    ports = db.Column(JSON, default=[])
    is_active = db.Column(db.Boolean, default=False)
    date_checked = db.Column(db.Date)

    def __repr__(self):
        return self.subdomain

    def serialize(self):
        data = Serializer.serialize(self)
        del data["id"]
        return {"data": data}

class Vulnerabilities(db.Model):
    __tablename__ = "vulnerabilities"
    id =  db.Column(db.Integer, primary_key=True)
    subdomain = db.Column(db.String, db.ForeignKey('subs.subdomain'))
    severity = db.Column(db.String)
    bugs = db.Column(JSON)
    endpoint = db.Column(db.String)
    date_checked = db.Column(db.Date)
    subs = db.relationship('Subdomains')

    def __repr__(self):
        return self.subdomain

    def serialize(self):
        data = Serializer.serialize(self)
        del data["id"]
        return {"data": data}


db.create_all()
