import os
import yaml
import requests
import json
import re as regex
from urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlparse
from colorama import Fore


yaml.warnings({'YAMLLoadWarning': False})

class Solver(object):
    def __init__(self, urls, directory):
        self.urls = urls
        self.directory = directory

    def open_urls(self):
        self.lists = []
        with open(self.urls, "r") as  _urls:
            for url in _urls:
                url = url.strip()
                self.lists.append(url)
        return self.lists

    def load_configs(self):
        self.configs_files = os.listdir(self.directory)
        self.configs_body = []
        self.configs_regex = []
        for  _config in self.configs_files:
            with open(self.directory + _config, "r") as confs:
                data =  yaml.load(confs)
                if not "regex" in str(data):
                    self.configs_body.append(data)
                else:
                    self.configs_regex.append(data)
        return self.configs_body, self.configs_regex

    def requester(self):
        """
        send requests to the server basically
        all config files * all urls
        """
        if len(self.configs_body) != 0:
            for _config in self.configs_body:
                self.path =  _config["requests"][0]["path"][0].removeprefix("{{BaseURL}}")
                self.method = _config["requests"][0]["method"]
                self.condition = _config["requests"][0]["matchers-condition"]
                self.severity = _config["info"]["severity"]
                self.matchers = _config["requests"][0]["matchers"]
                for _type in self.matchers:
                    try:
                        if _type["type"] == "status":
                            self.status = _type["status"][0]
                        elif _type["type"] == "word" and _type["part"] == "header":
                            self.word_h = _type["words"][0]
                        elif _type["type"] == "word" and _type["part"] == "body":
                            self.word_b = _type["words"][0]
                        else:
                            pass
                    except KeyError:
                        pass
                for url in self.lists:
                    url = url + self.path
                    requests.packages.urllib3.disable_warnings()
                    self.res =  requests.get(url, allow_redirects=False, timeout=20)
                    url_ = urlparse(self.res.url)
                    #:print(Fore.GREEN + self.res.url, Fore.RED + str(self.res.status_code))
                    #: res =  url_.scheme + "://" + url_.netloc
                    #: self.lists.remove(res)
                    if self.res.status_code == self.status and self.word_b in self.res.content.decode() and self.word_h in str(self.res.headers):
                        print(json.dumps({
                            "url": self.res.url, "code": self.res.status_code, "state": True,
                            "severity": self.severity, "endpoint": self.path,
                            "evidence":[{
                                "headers": self.word_h,
                                "body": self.word_b
                            }]
                        }))
                    else:
                        pass
                self.configs_body.remove(_config)
                return self.requester()

    def request_regex(self):
        if len(self.configs_regex) != 0:
            for _config in self.configs_regex:
                self.path =  _config["requests"][0]["path"][0].removeprefix("{{BaseURL}}")
                self.method = _config["requests"][0]["method"]
                #: self.condition = _config["requests"][0]["matchers-condition"]
                self.severity = _config["info"]["severity"]
                self.matchers = _config["requests"][0]["matchers"]
                for _type in self.matchers:
                    if _type["type"] == "status":
                        if len(_type["status"]) == 1:
                            self.status = _type["status"][0]
                            #: print(self.status)
                        else:
                            self.status = _type["status"][1] or _type["status"][-1]
                            #: print(self.status)
                    #: print(self.status)
                    try:
                        if _type["type"] == "regex":
                            self.re_ = _type["regex"][0]
                        else:
                            pass
                        #: print(self.re_)
                    except AttributeError:
                        pass
                if self.method == "GET":
                    self._method = requests.get
                elif self.method =="POST":
                    self._method = requests.post
                elif self.method == "OPTIONS":
                    self._method = requests.options
                elif self.method == "PUT":
                    self._method = requests.put
                else:
                    pass
                for url in self.lists:
                    requests.packages.urllib3.disable_warnings()
                    self.res =  self._method(url, allow_redirects=False, timeout=20)
                    if regex.match(self.re_, str(self.res.headers) + self.res.content.decode()):
                        print(json.dumps({
                            "url": self.res.url, "code":self.res.status_code,"state": True,
                            "severity": self.severity, "endpoint": self.path,
                            "evidence":[{
                                "regex": regex.findall(self.re_, str(self.headers)+ self.res.content.decode())
                            }]
                        }))
                    #return self.requester()
            else:
                pass


solver = Solver("urls.txt", "./configs/")
solver.open_urls()
solver.load_configs()
solver.requester()
solver.request_regex()
