
"""
collect subdomains from crt.sh and other public sources
you can also use third party tools to passive scan, sort uniq and parse them to resolvers.py

https://github.com/YashGoti/crtsh/blob/master/crtsh.py
"""

__file__ = "subs";

import sys, os, argparse, json, requests
crtsh = "https://crt.sh/?q={}&output=json"

subdomains = set()
wildcards = set()

"""
class Crtsh:
    def __init__(self, domain):
        self.domain = domain
    def finder(self):
        try:
            res = requests.get(crtsh.format(self.domain), timeout=25)
            if res.ok:
                content = res.content.decode("UTF-8")
                jsondata = json.loads(content)
                for i in range(len(jsondata)):
                    name_val = jsondata[i]['name_val']
                    if name_val.find("\n"):
                        sub = name_val.split("\n")
                        for sub_ in sub:
                            if sub_.find("*"):
                                if sub_ not in subdomains:
                                    subdomains.add(sub_)
                            else:
                                if sub_ not in wildcards:
                                    wildcards.add(sub_)
        except:
            pass

"""

class PassiveTools(object):
    def __init__(self, domain):
        self.domain = domain

    def amass(self, out):
        cmd = "amass enum -passive -d {} -o {}".format(self.domain,out)
        os.system(cmd)
        return out

    def findomain(self, out):
        cmd = "findomain-linux -t {} -q -u {}".format(self.domain, out)
        os.system(cmd)
        return out

    def subfinder(self, out):
        cmd = "subfinder -silent -d {} -o {}".format(self.domain, out)
        os.system(cmd)
        return out

    def combine(self, out):
        cmd = "cat ./out/*.txt | sort -u > {} && rm ./out/*.txt".format(out)
        os.system(cmd)
        return 0

    def __repr__(self):
        return self.domain


