import os
import yaml
import requests
from urllib3.exceptions import InsecureRequestWarning
from urllib.parse import urlparse

yaml.warnings({'YAMLLoadWarning': False})

class Solver(object):
    def __init__(self, urls, directory):
        self.urls = urls
        self.directory = directory
    def open_urls(self):
        self.lists = []
        #: print(*self.lists)
        with open(self.urls, "r") as  _urls:
            for url in _urls:
                url = url.strip()
                self.lists.append(url)
        return self.lists
    def load_configs(self):
        self.configs = os.listdir(self.directory)
    def requester(self):
        self.local = []
        for url in self.lists:
            print(url)
            for _config in self.configs:
                with open(self.directory + _config, "r") as confs:
                    data = yaml.load(confs)
                self._path = data["requests"][0]["path"][0].removeprefix("{{BaseURL}}")
                self._method = data["requests"][0]["method"]
            url = url + self._path
            self.local.append(url)
            print(url)
            requests.packages.urllib3.disable_warnings()
            if self._method == "GET":
                self._req = requests.get
            else:
                pass
            res = self._req(url, verify=False, timeout=20)
            parsed = urlparse(res.url)
            url_ =  parsed.scheme + "://" + parsed.netloc
            print(url_)
            self.lists.remove(url_)
            #: self.configs.remove(_config)
            return {
                "url": res.url,
                "code": res.status_code,
                "state": True
            }, self.requester()

solver = Solver("urls.txt", "./configs/")
solver.open_urls()
solver.load_configs()
solver.requester()
