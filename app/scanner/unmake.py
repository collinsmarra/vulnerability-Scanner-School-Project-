import json, re, datetime
import requests, yaml
import concurrent.futures
from urllib3.exceptions import InsecureRequestWarning

yaml.warnings({'YAMLLoadWarning': False})

class Loader(object):

    def __init__(self, urls, config):
        self.urls = urls
        self.config = config

    def configReader(self):
        config = self.config
        with open(self.config, "r") as confs:
            data = yaml.load(confs)
        self.method = data["requests"][0]["method"]
        self.path = data["requests"][0]["path"][0].removeprefix("{{BaseURL}}")
        self.condition = data["requests"][0]["matchers-condition"]
        #: self.status = data["requests"][0]["matchers"][-2]["status"][0]
        self.matchers = data["requests"][0]["matchers"]
        self.severity = data["info"]["severity"]
        self.method = "GET"
        # print(self.path)
        for type_ in self.matchers:
            if type_["type"] == "status":
                self.status = type_["status"][0]
                #: print(self.status)
            elif type_["type"] == "word" and  type_["part"] == "header":
                self.word_h = type_["words"][0]
            elif type_["type"] == "word" and type_["part"] == "body":
                self.word_b = type_["words"][0]
            elif type_["type"] == "regex" and type_["part"] == "header":
                self.re_header = type_["regex"][0]
            elif type_["type"] == "regex" and type_["part"] == "body":
                self.re_body = type_["regex"][0]
                print(self.re_body)
            else:
                pass

    def opener(self):
        #: urls = self.urls
        self.lists = []
        with open(self.urls, "r") as urls:
            for url in urls:
                url = url.strip()
                url = url+self.path
                self.lists.append(url)
        print(*self.files)
        return self.lists

    def requester(self):
        #url = self.lists
        self.timeout = 20
        self.method = requests.options
        if self.method == "GET":
            self._method = requests.get
        elif self.method == "POST":
            self._method = requests.post
        elif self.method == "PUT":
            self._method = requests.put
        else:
            self._method =  requests.delete
        for url in self.lists:
            requests.packages.urllib3.disable_warnings()
            self.res = self._method(url, allow_redirects=True, verify=False)
            if self.res.status_code == self.status and self.word_b in self.res.content.decode() and self.word_h in str(self.res.headers):
                #: print(self.res.url)
                self.lists.remove(url)
                return {
                    "url":self.res.url,"code":self.res.status_code,"state": True,
                    "severity": self.severity,"endpoint": self.path,
                    "evidence": [{
                        "headers": self.word_h,
                        "body": self.word_b
                        }]
                }, self.requester()
            else:
                #:  print(self.res.url)
                self.lists.remove(url)
                return self.requester()
            """return json.dumps({
            "status":self.res.status_code,"url":self.res.url,"state":False
            })"""


#: loader =  Loader(config="./configs/moodle-xss.yaml",urls="urls.txt")
#: loader.configReader()
#: loader.opener()
#: loader.requester()
