import json, time, os, re, datetime
from urllib.parse import urlparse
from flask import Blueprint, session, g, redirect, render_template, flash, request, jsonify, url_for
from app import app, db
from . models import Subdomains,Users
from . new  import Solver
from . subs import PassiveTools
from . expand import Expands
from .serialize import Serializer

scan =  Blueprint("scan", __name__, template_folder="templates", static_folder="static", url_prefix="/scan")


filenames = {"porters": "ports", "expands": "expanded urls", "subdomains": "Subdomains"}

path = os.getcwd()
path =  path+"/output"

@scan.route("/")
def home():
    return render_template("/base.html")

@scan.route("/subs", methods=["POST", "GET"])
def subfinder():
    if request.method == "POST":
        target = request.form["target"]
        parser = PassiveTools(target)
        parser.findomain(path + "/findomain.txt")
        parser.subfinder( path + "/subfinder.txt")
        parser.combine(path + "/subdomains")
        message = "Gathering subdomains, this may take a while..."
        flash(message)
        time.sleep(3)

        with open(path + "/findomain.txt", "r") as subdomains:
            for sub in subdomains:
                print(sub)
                statement = Subdomains(subdomain=sub.strip())
                db.session.add(statement)
            db.session.commit()
        subdomains = Subdomains.query.all()
        data = Serializer.serialize_list(subdomains)
        return redirect(url_for("scan.urls")), 302
    return render_template("/subs/subs.html")

@scan.route("/urls", methods=["GET", "POST"])
def urls():
    expands_file = path + "/expands.txt"
    subs_file = path + "/findomain.txt"
    urls_file = path + "/urls.txt"
    eee = Expands(subs_file)
    eee.expander()
    cmd = "cat {} | httpx -silent -threads 200 -o {}".format(expands_file, urls_file)
    os.system(cmd)
    subs = Subdomains.query.all()
    info = Serializer.serialize_list(subs)
    #: time.sleep(30)
    #: print(info)
    with open(urls_file, "r") as rr:
        for line in rr:
            line = line.strip()
            for sub in info["data"]:
                if urlparse(line).netloc.split(":")[0] == sub["data"]["subdomain"]:
                    sub["data"]["urls"].append(line)
                    sub["data"]["ports"].append(int(urlparse(line).netloc.split(":")[-1]))
    #: print(info)
    """big problem below"""
    #: print(subs)
    for sub in subs:
        for data in info["data"]:
            if data["data"]["subdomain"] == sub.subdomain:
                #: print("adasasdaassdassd")
                #: print(sub.urls)
                print(data["data"]["urls"])
                sub.urls = data["data"]["urls"]
                print(sub.urls)
                sub.ports = data["data"]["ports"]
                sub.date_checked = datetime.datetime.today()
                if len(data["data"]["urls"]) != 0:
                       sub.is_active = True
                else:
                       sub.is_active = False
    db.session.commit()
    return redirect(url_for('scan.display'))


@scan.route("/display/subs", methods=["GET", "POST", "OPTIONS"])
def display():
    subs = Subdomains.query.all()
    info = Serializer.serialize_list(subs)
    for data in info["data"]:
        data["data"]["date_checked"] = str(data["data"]["date_checked"])
    return jsonify(info), 200


@scan.route("/display/bugs", methods=["GET", "POST", "OPTIONS"])
def display_bugs():
    bugs = "bugs"
    return jsonify(bugs), 200


@scan.route("/thankyou")
def thank_you():
    message = "Thank You"
    return jsonify({"message": message}), 200

